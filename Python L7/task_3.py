# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()),
# вычитание (__sub__()),
# умножение (__mul__()),
# деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
# и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеекисходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.

from dataclasses import dataclass


@dataclass
class Cell:
    unit: int

    def __add__(self, other):
        return self.unit + other.unit

    def __sub__(self, other):
        return self.unit - other.unit if self.unit > other.unit else print(
            'Ошибка: Разность количества ячеек должна быть положитльной', end=', ')

    def __mul__(self, other):
        return self.unit * other.unit

    def __truediv__(self, other):
        return self.unit // other.unit

    def make_order(self, num):
        print(''.join(([('\n'.join(
            [''.join([''.join('*') for _ in range(num)]) for _ in range(self.unit // num)]))])) + '\n' + ''.join(
            [''.join('*') for _ in range(self.unit % num)]))


cell_1 = Cell(11)
cell_2 = Cell(9)
print(cell_1 + cell_2)
print(cell_2 - cell_1)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
cell_2.make_order(4)
